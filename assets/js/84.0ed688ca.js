(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{487:function(t,s,n){"use strict";n.r(s);var e=n(2),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("组件实例对象生命周期")]),t._v(" "),s("p",[t._v("组件实例对象 数据方法函数\n1、")]),t._v(" "),s("p",[t._v("2、")]),t._v(" "),s("p",[t._v("3、")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    vuex:\n      1、应用场景    \n        多组件依赖统一组件状态\n        不同组件行为，需要变更 同一状态\n      2、创建 挂载\n      \n      3、数据流程。\n        Component组价内改变数据。\n        调用总共的方法改变数据。this.$store.commit('JIA',params)\n        调用总共的方法改变数据。this.$store.dispatch('jiaOdd',params)iniStoreContext.commit('JIA', value)  \n        数据改变渲染在页面： this.$store.state\n        \n        action传递 {  }， muation改变 { } 。store数据源。\n        this.$store.dispatch this.$store.dispatch  this.$store.state\n        1、组件的commit ->muation对象的修改store -> 渲染$store.state\n        2、组件的dispatch ->action对象的commit ->  muation对象 store-> 渲染$store.state\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);